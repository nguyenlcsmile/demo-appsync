AWSTemplateFormatVersion: "2010-09-09"

Resources:
  conversationsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  usersTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  awsAppSyncServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  dynamodbAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "dynamodb-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
              - !GetAtt conversationsTable.Arn
              - !GetAtt usersTable.Arn
              # - !Sub "${userConversationsTable.Arn}/index/conversationId-index"
      Roles:
        - Ref: "awsAppSyncServiceRole"

  chatQLApi:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      Name: "ChatQL"
      AuthenticationType: "API_KEY"

  usersTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      Name: "usersTableDataSource"
      Description: "usersTable DynamoDB data source"
      Type: "AMAZON_DYNAMODB"
      ServiceRoleArn: !GetAtt awsAppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref usersTable
        AwsRegion: !Ref "AWS::Region"

  conversationsTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      Name: "conversationsTableDataSource"
      Description: "conversationsTable DynamoDB data source"
      Type: "AMAZON_DYNAMODB"
      ServiceRoleArn: !GetAtt awsAppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref conversationsTable
        AwsRegion: !Ref "AWS::Region"

  chatQLSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      Definition: |
        schema {
          query: Query
          mutation: Mutation
           subscription: Subscription
        }

        type Mutation {
          #  Create a Conversation. Use some of the cooked in template functions for UUID and DateTime.
          createConversation(createdAt: String!, id: ID!, name: String!): Conversation
          #  Put a single value of type 'User'. If an item does not exist with the same key the item will be created. If there exists an item at that key already, it will be updated.
          createUser(userId: String!, id: ID!, username: String!, registered: Boolean!): User
        }

        type Query {
          #  Scan through all values of type 'User'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'UserConnection' result to fetch pages.
          allUser(after: String, first: Int): [User]
          #  Get my user.
          me: User
        }

        type User {
          #  A unique identifier for the user.
          userId: ID!
          #  Generated id for a user. read-only
          id: ID!
          #  The username
          username: String!
          # is the user registered?
        	registered: Boolean
        }

        type Conversation {
          #  The Conversation's timestamp.
          createdAt: String!
          #  A unique identifier for the Conversation.
          id: ID!
          #  The Conversation's name.
          name: String!
        }

        type Subscription {
          #  Subscribes to all new messages in a given Conversation.
          subscribeToNewUsers: User
        		@aws_subscribe(mutations: ["createUser"])
        }

  createUserMutationResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createUser"
      DataSourceName: !GetAtt usersTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key" : {
              "userId" : { "S" : "${context.arguments.userId}" }
          },
          "attributeValues" : {
              "userId": {  "S": "${context.arguments.userId}" },
              "id": {  "S": "${context.arguments.id}" },
              "username": {  "S": "${context.arguments.username}" },
              "registered": {  "BOOL": true }
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  createConversationMutationResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createConversation"
      DataSourceName: !GetAtt conversationsTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "PutItem",
          "key": {
              "id": { "S" : "${context.arguments.id}"}
          },
          "attributeValues" : {
             "id": {  "S": "${context.arguments.id}" },
             "name": {  "S": "${context.arguments.name}" }
             #if(${context.arguments.createdAt}) ,"createdAt": { "S": "${context.arguments.createdAt}"} #end
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)

  allUserQueryResolver:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      TypeName: "Query"
      FieldName: "allUser"
      DataSourceName: !GetAtt usersTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation" : "Scan",
          "limit": #if(${context.arguments.first}) "${context.arguments.first}" #else 20 #end,
          "nextToken": #if(${context.arguments.after}) "${context.arguments.after}" #else null #end
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result.items)
