AWSTemplateFormatVersion: "2010-09-09"

Resources:
  awsAppSyncServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  chatQLApi:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      Name: "ChatQL"
      AuthenticationType: "API_KEY"

  DataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      Name: DataSource
      Type: NONE

  chatQLSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      Definition: |
        schema {
          query: Query
          mutation: Mutation
          subscription: Subscription
        }

        type User {
          id: ID!
          username: String!
          email: String!
          phone: String!
          address: String!
          createdAt: AWSDateTime!
          updatedAt: AWSDateTime!
        }

        type Query {}

        input CreateUserInput {
          id: ID
          username: String!
          email: String!
          phone: String!
          address: String!
        }


        type Mutation {
          createUser(input: CreateUserInput!): User
        }

        type Subscription {
          onCreateUser: User @aws_subscribe(mutations: ["createUser"])
        }

  createUser:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createUser"
      DataSourceName: !GetAtt DataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "payload": {
            "id": $utils.toJson($context.arguments.id),
            "username": $utils.toJson($context.arguments.username),
            "email": $utils.toJson($context.arguments.email),
            "phone": $utils.toJson($context.arguments.phone),
            "address": $utils.toJson($context.arguments.address)
          }
        }
      ResponseMappingTemplate: |
        {
          "id": $util.toJson($context.result.id),
          "username": $util.toJson($context.result.username),
          "email": $util.toJson($context.result.email),
          "phone": $util.toJson($context.result.phone),
          "address": $util.toJson($context.result.address),
          "createdAt": $util.toJson($util.time.nowFormatted("yyyy-MM-dd HH:mm:ssZ")),
          "updatedAt": $util.toJson($util.time.nowFormatted("yyyy-MM-dd HH:mm:ssZ"))
        }
