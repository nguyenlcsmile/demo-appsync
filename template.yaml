AWSTemplateFormatVersion: "2010-09-09"

Resources:
  awsAppSyncServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  chatQLApi:
    Type: "AWS::AppSync::GraphQLApi"
    Properties:
      Name: "ChatQL"
      AuthenticationType: "API_KEY"

  usersTableDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      Name: "usersTableDataSource"
      Description: ""
      Type: "NONE"
      ServiceRoleArn: !GetAtt awsAppSyncServiceRole.Arn

  chatQLSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      Definition: |
        schema {
          mutation: Mutation
          subscription: Subscription
        }

        type User {
          id: ID!
          username: String!
          email: String!
          phone: String!
          address: String!
          createdAt: AWSDateTime!
          updatedAt: AWSDateTime!
        }

        input CreateUserInput {
          id: ID
          username: String!
          email: String!
          phone: String!
          address: String!
        }

        type Mutation {
          createUser(input: CreateUserInput!): User
        }

        type Subscription {
          onCreateUser: User @aws_subscribe(mutations: ["createUser"])
        }

  createUser:
    Type: "AWS::AppSync::Resolver"
    Properties:
      ApiId: !GetAtt chatQLApi.ApiId
      TypeName: "Mutation"
      FieldName: "createUser"
      DataSourceName: !GetAtt usersTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "payload": $util.toJson($context.arguments)
        }
      ResponseMappingTemplate: |
        $utils.toJson($context.result)
